[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "depth-map-project"
version = "0.1.0"
description = "Comprehensive depth estimation comparison: classical stereo vision vs modern monocular generative models"
authors = [
    {name = "Computer Vision Team", email = "team@depthmap.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["computer-vision", "depth-estimation", "stereo-vision", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]

dependencies = [
    "opencv-contrib-python>=4.8.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "timm>=0.9.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "scikit-image>=0.21.0",
    "tqdm>=4.65.0",
    "omegaconf>=2.3.0",
    "pyyaml>=6.0",
    "pillow>=10.0.0",
    "scipy>=1.11.0",
    "pandas>=2.0.0",
    "seaborn>=0.12.0",
    "requests>=2.31.0",
    "pathlib2>=2.3.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "pre-commit>=3.3.0",
    "mypy>=1.5.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]
viz = [
    "open3d>=0.17.0",
    "plotly>=5.15.0",
    "wandb>=0.15.0",
]
app = [
    "streamlit>=1.25.0",
    "gradio>=3.40.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
    "torchvision[cuda]>=0.15.0",
]
export = [
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "tensorrt>=8.6.0",
]

[project.urls]
Homepage = "https://github.com/username/depth-map-project"
Repository = "https://github.com/username/depth-map-project"
Documentation = "https://github.com/username/depth-map-project/blob/main/README.md"
Issues = "https://github.com/username/depth-map-project/issues"

[project.scripts]
depth-classical = "depthmap.classical.cli:main"
depth-generative = "depthmap.generative.cli:main"
depth-eval = "depthmap.eval.cli:main"
depth-download = "depthmap.datasets.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 