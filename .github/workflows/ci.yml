name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: ruff check src/ tests/
    
    - name: Check formatting with black
      run: black --check src/ tests/
    
    - name: Type check with mypy
      run: mypy src/ --ignore-missing-imports

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,viz]"
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  smoke-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Create test data
      run: |
        mkdir -p test_data
        python -c "
import numpy as np
import cv2
# Create synthetic stereo pair
img = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
cv2.imwrite('test_data/left.png', img)
# Slightly shifted right image
img_right = np.roll(img, -10, axis=1)
cv2.imwrite('test_data/right.png', img_right)
# Synthetic depth map
depth = np.random.uniform(1, 10, (480, 640)).astype(np.float32)
np.save('test_data/depth.npy', depth)
"
    
    - name: Test classical pipeline
      run: |
        python -c "
from depthmap.classical import StereoDepthEstimator
from depthmap.utils.io import load_image
import numpy as np

estimator = StereoDepthEstimator(method='BM', num_disparities=32, block_size=15)
img_left = load_image('test_data/left.png')
img_right = load_image('test_data/right.png')
depth, disparity = estimator.estimate_depth(img_left, img_right, 500.0, 0.1)
print(f'Classical depth estimation: {depth.shape}, range: [{depth.min():.2f}, {depth.max():.2f}]')
"
    
    - name: Test evaluation metrics
      run: |
        python -c "
from depthmap.eval.metrics import compute_all_metrics
import numpy as np

# Create synthetic data
pred_depth = np.random.uniform(1, 10, (100, 100))
gt_depth = pred_depth + np.random.normal(0, 0.5, (100, 100))
gt_depth = np.clip(gt_depth, 0.1, 20)

metrics = compute_all_metrics(pred_depth, gt_depth)
print(f'Evaluation metrics: RMSE={metrics[\"rmse\"]:.3f}, Î´1={metrics[\"delta1\"]:.1f}%')
"
    
    - name: Test configuration
      run: |
        python -c "
from depthmap.utils.config import get_default_config, save_config, load_config
import tempfile
import os

config = get_default_config()
with tempfile.NamedTemporaryFile(mode='w', suffix='.yml', delete=False) as f:
    save_config(config, f.name)
    loaded_config = load_config(f.name)
    print(f'Config test passed: {len(loaded_config)} keys loaded')
    os.unlink(f.name)
"

  build-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme
    
    - name: Check README
      run: |
        python -c "
import re
with open('README.md', 'r') as f:
    content = f.read()
    # Check for required sections
    required_sections = ['Installation', 'Usage', 'Testing', 'License']
    for section in required_sections:
        if section not in content:
            raise ValueError(f'Missing required section: {section}')
    print('README.md validation passed')
"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e ".[dev]"
    
    - name: Run safety check
      run: safety check
    
    - name: Run bandit security check
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json 